---
# MCP (Model Context Protocol) Configuration
# Generated: 2025-10-24
# Description: Testing and validation utilities configuration

# Stack Metadata
stack:
  name: "mcp"
  description: "Model Context Protocol utilities for testing and validation"
  version: "3.0"
  purpose: "Automated testing, code quality validation, development tooling"

# Service Definitions
services:
  python:
    image: "docker_examples_python:latest"
    build:
      context: "../.docker-compose/mcp/python_utils"
      dockerfile: "python.Dockerfile"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=test
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - docker_examples_python_app:/app
      - docker_examples_tests:/app/tests
      - docker_examples_pytest_cache:/app/.pytest_cache
      - docker_examples_coverage:/app/coverage
    working_dir: /app
    command: ["tail", "-f", "/dev/null"]  # Keep container running
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

# Volume Definitions
volumes:
  docker_examples_pytest_cache:
    driver: local
  docker_examples_coverage:
    driver: local
  docker_examples_python_app:
    driver: local
  docker_examples_tests:
    driver: local

# Network Definitions
networks:
  default:
    name: docker_examples_mcp_network
    driver: bridge

# Testing Configuration
testing:
  framework: pytest
  configuration:
    test_directory: "tests/"
    test_pattern: "test_*.py"
    coverage_target: 80
    parallel_execution: true
    workers: 4

  commands:
    run_tests: "pytest tests/ -v --tb=short"
    run_coverage: "pytest tests/ --cov=docker_examples_utils --cov-report=html --cov-report=term"
    run_lint: "ruff check docker_examples_utils/ tests/"
    run_format: "black docker_examples_utils/ tests/"
    run_type_check: "mypy docker_examples_utils/"
    run_security: "bandit -r docker_examples_utils/"

  reports:
    coverage_directory: "coverage/"
    test_results: "test-results/"
    lint_reports: "lint-reports/"

# Code Quality Configuration
code_quality:
  linting:
    tools:
      - ruff
      - black
      - mypy
      - bandit
    configuration:
      ruff_config: "pyproject.toml"
      black_config: "pyproject.toml"
      mypy_config: "pyproject.toml"

  formatting:
    line_length: 88
    target_version: "py312"
    string_quotes: double
    magic_trailing_comma: true

  type_checking:
    strict_mode: true
    warn_unused_ignores: true
    disallow_untyped_defs: true
    disallow_incomplete_defs: true

# Validation Configuration
validation:
  docker_compose:
    validate_command: "python .docker-compose/validate_stacks.py"
    check_syntax: true
    check_references: true
    check_secrets: true

  security:
    scan_dependencies: true
    check_secrets: true
    vulnerability_scanning: true

  performance:
    benchmark_tests: true
    memory_profiling: true
    cpu_profiling: true

# CI/CD Configuration
ci_cd:
  github_actions:
    workflows:
      - test
      - lint
      - security
      - deploy
    triggers:
      - push
      - pull_request
    branches:
      - main
      - develop

  pre_commit:
    hooks:
      - black
      - ruff
      - mypy
      - pytest
    configuration: ".pre-commit-config.yaml"

# Development Configuration
development:
  tools:
    - pytest
    - pytest-cov
    - ruff
    - black
    - mypy
    - bandit
    - pre-commit

  environment:
    python_version: "3.14"
    uv_enabled: true
    virtual_environment: ".venv"

  debugging:
    pdb_enabled: true
    verbose_logging: true
    test_debugging: true

# Deployment Configuration
deployment:
  compose_file: "../../compose/mcp/docker-compose.yml"
  service_name: "test"
  commands:
    test: "docker compose -f ../../compose/mcp/docker-compose.yml run --rm test"
    test_coverage: "docker compose -f ../../compose/mcp/docker-compose.yml run --rm test-coverage"
    lint: "docker compose -f ../../compose/mcp/docker-compose.yml run --rm lint"
    format: "docker compose -f ../../compose/mcp/docker-compose.yml run --rm format"
    type_check: "docker compose -f ../../compose/mcp/docker-compose.yml run --rm type-check"
    security_scan: "docker compose -f ../../compose/mcp/docker-compose.yml run --rm security"

  resource_limits:
    python:
      cpus: "1.0"
      memory: "1g"

# Integration Configuration
integration:
  external_services:
    github_api: true
    docker_hub: true
    external_databases: false

  mock_services:
    enabled: false  # All mocks removed
    database_mock: false
    redis_mock: false
    api_mock: false

  test_data:
    fixtures_directory: "tests/fixtures/"
    sample_data: "tests/data/"
    mock_responses: "tests/mocks/"