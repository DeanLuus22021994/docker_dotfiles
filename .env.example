# Modern Data Platform v2.0 - Environment Configuration Template
# 
# CONFIGURATION APPROACH:
# - Single .env file for local development (this is the template)
# - GitHub repository secrets for CI/CD (already configured via gh CLI)
# - All service passwords use DOCKER_ prefix for consistency
# - Never commit .env to version control - it contains sensitive credentials
#
# SETUP INSTRUCTIONS:
# 1. Copy this file:  cp .env.example .env
# 2. Update all CHANGE_ME values with strong passwords
# 3. For CI/CD, secrets are already set in GitHub repository
#
# VERIFY GITHUB SECRETS:
#   gh secret list --repo DeanLuus22021994/docker_dotfiles
#
# Current GitHub secrets configured:
#   ✓ DOCKER_POSTGRES_PASSWORD
#   ✓ DOCKER_MARIADB_ROOT_PASSWORD  
#   ✓ DOCKER_MARIADB_PASSWORD
#   ✓ DOCKER_REDIS_PASSWORD
#   ✓ DOCKER_MINIO_ROOT_USER
#   ✓ DOCKER_MINIO_ROOT_PASSWORD
#   ✓ DOCKER_GRAFANA_ADMIN_PASSWORD
#   ✓ DOCKER_JUPYTER_TOKEN
#   ✓ DOCKER_PGADMIN_PASSWORD
#   ✓ GH_PAT
#   ✓ GITHUB_OWNER (set via environment)
#   ✓ DOCKER_ACCESS_TOKEN
#   ✓ CODECOV_TOKEN

# =============================================================================
# GITHUB INTEGRATION (REQUIRED)
# =============================================================================
# GitHub Configuration (REQUIRED for CI/CD and GitHub MCP)
GITHUB_OWNER=your-github-username
GH_PAT=ghp_your_github_personal_access_token

# =============================================================================
# DATABASE PASSWORDS (REQUIRED - All prefixed with DOCKER_)
# =============================================================================
# PostgreSQL - Main relational database
DOCKER_POSTGRES_PASSWORD=CHANGE_ME_STRONG_PASSWORD_HERE

# MariaDB - Alternative relational database
DOCKER_MARIADB_ROOT_PASSWORD=CHANGE_ME_STRONG_ROOT_PASSWORD
DOCKER_MARIADB_PASSWORD=CHANGE_ME_STRONG_PASSWORD_HERE

# Redis - In-memory cache and message broker
DOCKER_REDIS_PASSWORD=CHANGE_ME_STRONG_PASSWORD_HERE

# =============================================================================
# OBJECT STORAGE (REQUIRED - Prefixed with DOCKER_)
# =============================================================================
# MinIO - S3-compatible object storage
DOCKER_MINIO_ROOT_USER=CHANGE_ME_ADMIN_USERNAME
DOCKER_MINIO_ROOT_PASSWORD=CHANGE_ME_STRONG_PASSWORD_MIN_8_CHARS

# =============================================================================
# MONITORING & ANALYTICS (REQUIRED - Prefixed with DOCKER_)
# =============================================================================
# Grafana - Metrics visualization dashboard
DOCKER_GRAFANA_ADMIN_PASSWORD=CHANGE_ME_STRONG_PASSWORD_HERE

# =============================================================================
# DEVELOPMENT TOOLS (REQUIRED - Prefixed with DOCKER_)
# =============================================================================
# Jupyter - Interactive Python notebooks for ML/Data Science
DOCKER_JUPYTER_TOKEN=CHANGE_ME_STRONG_TOKEN_HERE

# pgAdmin - Database administration interface
DOCKER_PGADMIN_PASSWORD=CHANGE_ME_STRONG_PASSWORD_HERE

# =============================================================================
# OPTIONAL SERVICES
# =============================================================================
# Docker Hub Access Token (OPTIONAL - for increased pull rate limits)
DOCKER_ACCESS_TOKEN=your_docker_access_token

# Codecov Token (OPTIONAL - for coverage reporting in CI/CD)
CODECOV_TOKEN=your_codecov_token

# =============================================================================
# API SECURITY (OPTIONAL - for web dashboard authentication)
# =============================================================================
# Enable/disable authentication (set to 'false' for local development)
AUTH_ENABLED=false

# JWT secret for signing tokens (REQUIRED if AUTH_ENABLED=true)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=CHANGE_ME_TO_RANDOM_64_CHAR_HEX_STRING

# JWT token expiration times
JWT_EXPIRES_IN=8h
JWT_REFRESH_EXPIRES_IN=7d

# CORS allowed origins (comma-separated list)
CORS_ORIGIN=http://localhost:3000,http://localhost:5173

# Node environment (development or production)
NODE_ENV=development

# =============================================================================
# SECURITY GUIDELINES
# =============================================================================
# - Use strong passwords (minimum 16 characters, mix of letters/numbers/symbols)
# - Never reuse passwords across services
# - Consider using a password manager to generate and store credentials
# - For GitHub PAT, grant only necessary scopes (repo, read:org)
# - Rotate credentials periodically
# - Add .env to .gitignore (already configured)
#
# To load these variables:
#   Linux/macOS:   export $(cat .env | xargs)
#   PowerShell:    Get-Content .env | ForEach-Object { $var = $_.Split('='); [Environment]::SetEnvironmentVariable($var[0], $var[1], 'Process') }
#   Fish:          export (cat .env | xargs)
#
# Validate with:   python scripts/validate_env.py
# Start stack:     docker-compose up -d
# Start with dev:  docker-compose --profile dev up -d

