# Pre-commit hooks configuration
# Strict error enforcement - blocks commits on failures
# Run manually: pre-commit run --all-files
# Auto-runs on: git commit

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
        args: ['--unsafe']  # Allow custom YAML tags
      - id: check-json
        name: Check JSON syntax
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: mixed-line-ending
        name: Check line endings

  # YAML validation
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: Validate YAML files
        args: ['-d', '{extends: default, rules: {line-length: {max: 120}, document-start: disable}}']
        types: [yaml]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Lint shell scripts
        args: ['--severity=warning']

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        name: Lint Markdown files
        args: ['--fix', '--disable', 'MD013', 'MD033', 'MD041']

  # Prettier formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: Format JSON/YAML/Markdown
        types_or: [json, yaml, markdown]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: ^\.env\.example$

  # Python code quality
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        name: Format Python with Black
        args: ['--line-length=100']
        language_version: python3.14

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.2.0
    hooks:
      - id: ruff
        name: Lint Python with Ruff
        args: ['--fix', '--exit-non-zero-on-fix']

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: Type check with mypy
        args: ['--strict', '--ignore-missing-imports']
        additional_dependencies: ['types-all']

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.1-beta
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # Docker Compose validation
  - repo: local
    hooks:
      - id: docker-compose-check
        name: Validate docker-compose.yml
        entry: docker-compose
        args: ['config', '--quiet']
        language: system
        files: docker-compose\.yml$
        pass_filenames: false

  # ============================================================================
  # MkDocs Documentation Quality Gates
  # ============================================================================
  
  # Frontmatter validation
  - repo: local
    hooks:
      - id: mkdocs-frontmatter
        name: Validate Markdown Frontmatter
        entry: python
        args: ['.config/mkdocs/scripts/validate_frontmatter_cli.py']
        language: system
        files: ^docs/.*\.md$
        pass_filenames: true
        
  # MkDocs build test (expensive - manual only)
  - repo: local
    hooks:
      - id: mkdocs-build
        name: MkDocs Build Test
        entry: mkdocs
        args: ['build', '--config-file', '.config/mkdocs/mkdocs.yml', '--strict']
        language: system
        pass_filenames: false
        files: ^(docs/.*\.md|\.config/mkdocs/.*\.yml)$
        stages: [manual]