[project]
name = "docker-modern-data-platform"
version = "2.0.0"
description = "Turn-key modern data platform with GPU, dual databases, monitoring, and AI integration"
authors = [{ name = "Dean Luus", email = "dean@example.com" }]
requires-python = ">=3.14.0"
license = { text = "MIT" }
readme = "README.md"
keywords = [
    "docker",
    "data-platform",
    "gpu",
    "jupyter",
    "postgresql",
    "mariadb",
    "redis",
    "minio",
    "grafana",
    "prometheus",
    "mcp",
]

[project.urls]
Homepage = "https://github.com/DeanLuus22021994/docker_dotfiles"
Repository = "https://github.com/DeanLuus22021994/docker_dotfiles.git"
Issues = "https://github.com/DeanLuus22021994/docker_dotfiles/issues"

[dependency-groups]
dev = [
    "black>=24.0",
    "ruff>=0.6",
    "mypy>=1.11",
    "pylint>=4.0",
    "pytest>=8.3",
    "pytest-cov>=6.0",
    "pytest-mock>=3.14",
    "pytest-asyncio>=0.24",
]

[tool.black]
line-length = 100
target-version = ['py313']  # py314 not yet supported by Black

[tool.ruff]
line-length = 100
target-version = "py313"  # py314 not yet supported by Ruff

[tool.ruff.lint]
# E402: Module level import not at top of file - Required for sys.path modification
# F401: Unused import - pytest/mock imports used by decorators (@pytest.fixture, @patch)
# F811: Redefinition of unused variable - Pytest fixtures intentionally shadow
# ARG002: Unused function argument - Pytest fixtures are used by framework
ignore = ["E402", "F401", "F811", "ARG002"]

[tool.mypy]
python_version = "3.14"
strict = true
warn_return_any = true
warn_unused_configs = true
mypy_path = "scripts"

[tool.pytest.ini_options]
minversion = "8.3"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=scripts/python",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["scripts/python"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/mcp/*",  # MCP modules not yet tested (Phase 4.3)
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.pylint.main]
init-hook = "import sys; sys.path.append('scripts')"
max-line-length = 100

[tool.pylint.messages_control]
disable = [
    "C0413", # wrong-import-position - Required for sys.path modification
    "E0401", # import-error - False positive for local modules after sys.path modification
    "W0611", # unused-import - pytest imports needed for test discovery
    "W0613", # unused-argument - pytest fixtures used by framework via dependency injection
    "W0621", # redefined-outer-name - pytest fixtures intentionally shadow fixture names
    "W0612", # unused-variable - intentionally unused variables in test unpacking
    "C0301", # line-too-long - handled by Black formatter (100 chars)
    "W2301", # unnecessary-ellipsis - False positive for Protocol methods and stub files (PEP 544, PEP 561)
    "C0116", # missing-function-docstring - Stub files don't need docstrings (type hints only)
]

[tool.docker-cluster]
description = "Modern Data Platform - 14-service cluster with GPU, databases, monitoring, AI"
version = "2.0.0"

[tool.docker-cluster.commands]
build = "docker-compose build"
up = "docker-compose up -d loadbalancer cluster-web1 cluster-web2 cluster-web3 cluster-postgres cluster-redis cluster-mariadb cluster-jupyter cluster-minio cluster-grafana cluster-prometheus cluster-github-mcp cluster-k9s"
dev = "docker-compose --profile dev up -d"
down = "docker-compose down"
logs = "docker-compose logs -f"
ps = "docker-compose ps"
validate = "docker-compose config --quiet"
clean = "docker-compose down -v && docker system prune -af"
test-health = "make test-health"
test-conn = "make test-conn"
