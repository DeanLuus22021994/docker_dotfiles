---
# Cluster Example Configuration - CI/CD Automation
# Generated: 2025-10-24
# Description: Config-driven automation for load-balanced multi-instance deployment

# Stack Metadata
stack:
  name: "cluster-example"
  description: "Production-like environment with load balancing and multiple instances"
  version: "3.0"
  purpose: "Testing horizontal scaling, load balancing, production simulation"
  type: "production"

# CI/CD Configuration
ci_cd:
  github_actions:
    workflow: "cluster-example.yml"
    triggers:
      - push:
          branches: [main]
      - pull_request:
          branches: [main]
      - schedule:
          - cron: "0 3 * * 1"  # Weekly on Monday
    environment: "staging"

  docker:
    build_context: "../../.dockerfiles"
    build_args:
      ENVIRONMENT: "production"
      SERVICE_TYPE: "cluster"
      WORKERS: "3"
    image_tag: "docker_cluster:latest"
    registry: "docker.io"

  testing:
    framework: "pytest"
    coverage_target: "90"
    security_scan: true
    performance_test: true
    load_test: true

# Environment Variables (Config-Driven)
environment:
  # Application Configuration
  ENVIRONMENT: "production"
  DEBUG: "false"
  LOG_LEVEL: "INFO"

  # Security Configuration
  API_KEY: "${API_KEY}"
  RATE_LIMIT_REQUESTS: "1000"
  RATE_LIMIT_WINDOW: "60"
  CORS_ORIGINS: "http://localhost:3000,http://localhost:8080"
  SECURITY_HEADERS_ENABLED: "true"
  INPUT_VALIDATION_ENABLED: "true"

  # Database Configuration
  POSTGRES_DB: "app"
  POSTGRES_USER: "app"
  POSTGRES_HOST: "postgres"
  POSTGRES_PORT: "5432"
  MARIADB_DATABASE: "app"
  MARIADB_USER: "app"
  MARIADB_HOST: "mariadb"
  MARIADB_PORT: "3306"

  # Redis Configuration
  REDIS_URL: "redis://redis:6379"
  REDIS_DB: "0"

  # Load Balancer Configuration
  NGINX_WORKER_PROCESSES: "auto"
  NGINX_WORKER_CONNECTIONS: "1024"

  # External APIs
  GITHUB_TOKEN: "${GITHUB_TOKEN}"

# Service Configuration (References to docker-compose.yml)
services:
  python:
    ports: [8001, 8002, 8003]  # Multiple instances
    base_port: 8000
    health_endpoint: "/health"
    api_docs: "/docs"
    replicas: 3
  node:
    port: 3000
    dev_server: false
  nginx:
    port: 8080
    upstream_port: 80
    config_volume: true
    health_endpoint: "/health"
  mariadb:
    port: 3306
    database: "app"
    type: "mariadb"
  postgres:
    port: 5432
    database: "app"
    type: "postgresql"
  redis:
    port: 6379

# Volume Configuration (Named volumes for persistence)
volumes:
  mariadb_data: "docker_mariadb_data"
  mariadb_logs: "docker_mariadb_logs"
  postgres_data: "docker_postgres_data"
  postgres_logs: "docker_postgres_logs"
  redis_data: "docker_redis_data"
  python_app: "docker_python_app"
  node_app: "docker_node_app"
  nginx_config: "docker_nginx_config"
  nginx_logs: "docker_nginx_logs"
  python_mcp: "docker_python_mcp"  # MCP utilities volume

# Secrets Configuration (Environment Variable Driven)
secrets:
  mariadb_password:
    env_var: "docker_DB_PASSWORD"
    source: "../../.secrets/secrets.env"
    description: "MariaDB database password loaded from environment variables"
  postgres_password:
    env_var: "docker_DB_PASSWORD"
    source: "../../.secrets/secrets.env"
    description: "PostgreSQL database password loaded from environment variables"

# Network Configuration
network:
  name: "docker_cluster_example_network"
  driver: "bridge"

# Load Balancer Configuration (Config-Driven)
load_balancer:
  nginx:
    upstream_servers:
      - "python:8000"
      - "python:8001"
      - "python:8002"
    algorithm: "round_robin"
    health_checks:
      enabled: true
      interval: "10s"
      timeout: "5s"
      unhealthy_threshold: 3
      healthy_threshold: 2

# Scaling Configuration (CI/CD Automation)
scaling:
  python:
    min_replicas: 1
    max_replicas: 5
    target_cpu_utilization: 70
    scale_command: "docker compose up -d --scale python={count}"
  node:
    replicas: 1
  nginx:
    replicas: 1
  mariadb:
    replicas: 1
  postgres:
    replicas: 1
  redis:
    replicas: 1

# Monitoring Configuration (CI/CD Automation)
monitoring:
  enabled: true
  metrics_endpoint: "/metrics"
  health_endpoint: "/health"
  log_level: "INFO"
  exporters: ["prometheus"]
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

# Resource Limits (Config-Driven)
resource_limits:
  python:
    cpus: "0.5"
    memory: "512m"
  node:
    cpus: "0.5"
    memory: "512m"
  nginx:
    cpus: "0.25"
    memory: "128m"
  mariadb:
    cpus: "0.5"
    memory: "512m"
  postgres:
    cpus: "0.5"
    memory: "512m"
  redis:
    cpus: "0.25"
    memory: "256m"

# Deployment Configuration
deployment:
  compose_file: "../../.compose/cluster-example/docker-compose.yml"
  scale_command: "docker compose -f ../../.compose/cluster-example/docker-compose.yml up -d --scale python=3"
  scale_defaults:
    python: 3
    node: 1
    nginx: 1
    mariadb: 1
    postgres: 1
    redis: 1
  restart_policy: "unless-stopped"