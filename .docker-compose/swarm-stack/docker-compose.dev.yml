services:
  node:
    build:
      context: ../..
      dockerfile: .docker-compose/swarm-stack/dockerfiles/node.Dockerfile
    volumes:
      - ../..:/app:cached
      - node_modules:/app/node_modules
    working_dir: /app
    command: sh -c "npm install --legacy-peer-deps && npm start"
    ports:
      - "3000:3000"
    environment:
      # Centralized configuration via environment variables
      - DOCKER_EXAMPLES__ENVIRONMENT=development
      - DOCKER_EXAMPLES__DEBUG=true
      - DOCKER_EXAMPLES__LOGGING__LEVEL=INFO
      - DOCKER_EXAMPLES__LOGGING__FORMAT=json
      - DOCKER_EXAMPLES__LOGGING__ENABLE_CORRELATION_IDS=true
      - DOCKER_EXAMPLES__SERVICES__NODE__HOST=localhost
      - DOCKER_EXAMPLES__SERVICES__NODE__PORT=3000
      - DOCKER_EXAMPLES__SERVICES__PYTHON__HOST=localhost
      - DOCKER_EXAMPLES__SERVICES__PYTHON__PORT=8000
      - DOCKER_EXAMPLES__SERVICES__DATABASE__HOST=db
      - DOCKER_EXAMPLES__SERVICES__DATABASE__PORT=5432
      - DOCKER_EXAMPLES__SERVICES__REDIS__HOST=redis
      - DOCKER_EXAMPLES__SERVICES__REDIS__PORT=6379
      # Legacy environment variables for backward compatibility
      - NODE_ENV=development
    depends_on:
      - db
    networks:
      - swarm-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://127.0.0.1:3000/ || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 45s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  python:
    build:
      context: ../..
      dockerfile: .docker-compose/swarm-stack/dockerfiles/python.Dockerfile
      target: deps # Skip final stage for faster builds
    volumes:
      - ../..:/app:cached
      - docker_examples_python_venv:/app/python_utils/.venv
      - docker_examples_python_cache:/root/.cache/pip
    working_dir: /app
    command: sh -c "pip install -e python_utils && python -m uvicorn docker_examples_utils.api:app --reload --host 0.0.0.0 --port 8000"
    ports:
      - "8000:8000"
    environment:
      # Centralized configuration via environment variables
      - DOCKER_EXAMPLES__ENVIRONMENT=development
      - DOCKER_EXAMPLES__DEBUG=true
      - DOCKER_EXAMPLES__LOGGING__LEVEL=INFO
      - DOCKER_EXAMPLES__LOGGING__FORMAT=json
      - DOCKER_EXAMPLES__LOGGING__ENABLE_CORRELATION_IDS=true
      - DOCKER_EXAMPLES__DATABASE__HOST=db
      - DOCKER_EXAMPLES__DATABASE__PORT=5432
      - DOCKER_EXAMPLES__DATABASE__NAME=mydb
      - DOCKER_EXAMPLES__DATABASE__USER=user
      - DOCKER_EXAMPLES__DATABASE__PASSWORD=password
      - DOCKER_EXAMPLES__REDIS__HOST=redis
      - DOCKER_EXAMPLES__REDIS__PORT=6379
      - DOCKER_EXAMPLES__SERVICES__NODE__HOST=node
      - DOCKER_EXAMPLES__SERVICES__NODE__PORT=3000
      - DOCKER_EXAMPLES__SERVICES__PYTHON__HOST=localhost
      - DOCKER_EXAMPLES__SERVICES__PYTHON__PORT=8000
      - DOCKER_EXAMPLES__SERVICES__DATABASE__HOST=db
      - DOCKER_EXAMPLES__SERVICES__DATABASE__PORT=5432
      - DOCKER_EXAMPLES__SERVICES__REDIS__HOST=redis
      - DOCKER_EXAMPLES__SERVICES__REDIS__PORT=6379
      - DOCKER_EXAMPLES__DOCKER_BUILDKIT=true
      - DOCKER_EXAMPLES__PYTHON_UNBUFFERED=true
      - DOCKER_EXAMPLES__PYTHON_PATH=/app/python_utils:/app
      # Legacy environment variables for backward compatibility
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app/python_utils:/app
      - DEBUG=true
    depends_on:
      - db
    networks:
      - swarm-network
    healthcheck:
      test:
        ["CMD", "python", "-c", "import sys; print('Python OK'); sys.exit(0)"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  db:
    build:
      context: ../..
      dockerfile: .docker-compose/swarm-stack/dockerfiles/postgres.Dockerfile
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - db_data:/var/lib/postgresql/data
      - db_logs:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      - swarm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - swarm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

volumes:
  db_data:
    driver: local
  db_logs:
    driver: local
  node_modules:
    driver: local
  volumes:
  docker_examples_python_venv:
    driver: local
  python_cache:
    driver: local

networks:
  swarm-network:
    external: true
    name: docker-examples-swarm_swarm-network
