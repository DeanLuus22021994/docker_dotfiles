# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI/CD Pipeline

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  GITHUB_OWNER: ${{ github.repository_owner }}
  DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  GH_PAT: ${{ github.token }}

jobs:
  validate:
    name: Validate Stack Configuration
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate docker-compose files
        run: |
          python .docker-compose/validate_stacks.py

      - name: Check docker-compose syntax
        run: |
          docker-compose config -q

  build:
    name: Build Docker Images
    runs-on: self-hosted
    needs: validate

    strategy:
      matrix:
        service:
          - cluster-api-proxy
          - cluster-web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Build ${{ matrix.service }}
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
        run: |
          docker-compose build ${{ matrix.service }}

      - name: Save image
        run: |
          docker save docker_${{ matrix.service }} | gzip > /tmp/${{ matrix.service }}.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: /tmp/${{ matrix.service }}.tar.gz
          retention-days: 1

  security-scan:
    name: Security Scan
    runs-on: self-hosted
    needs: build

    strategy:
      matrix:
        service:
          - cluster-api-proxy
          - cluster-web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: /tmp

      - name: Load image
        run: |
          docker load < /tmp/${{ matrix.service }}.tar.gz

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker_${{ matrix.service }}
          format: "sarif"
          output: "trivy-results-${{ matrix.service }}.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results-${{ matrix.service }}.sarif"

  test:
    name: Run Tests
    runs-on: self-hosted
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=agent --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: self-hosted
    needs: build

    services:
      docker:
        image: docker:24-dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all images
        uses: actions/download-artifact@v4
        with:
          path: /tmp/images

      - name: Load images
        run: |
          for img in /tmp/images/*/*.tar.gz; do
            docker load < "$img"
          done

      - name: Start services
        env:
          GITHUB_OWNER: ${{ env.GITHUB_OWNER }}
          DOCKER_ACCESS_TOKEN: ${{ env.DOCKER_ACCESS_TOKEN }}
          GH_PAT: ${{ env.GH_PAT }}
        run: |
          docker-compose up -d cluster-api-proxy cluster-web
          sleep 10

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'

      - name: Run integration tests
        run: |
          docker-compose exec -T cluster-api-proxy pytest tests/integration/ -v

      - name: Collect logs
        if: failure()
        run: |
          docker-compose logs > integration-test-logs.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: integration-test-logs.txt

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  lint:
    name: Code Quality Checks
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy

      - name: Run Ruff
        run: |
          ruff check agent/ tests/

      - name: Run Black
        run: |
          black --check agent/ tests/

      - name: Run mypy
        run: |
          mypy --strict agent/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: web-content/package-lock.json

      - name: Install Node dependencies
        working-directory: web-content
        run: |
          npm ci --legacy-peer-deps

      - name: Run ESLint
        working-directory: web-content
        run: |
          npm run lint

      - name: Run TypeScript check
        working-directory: web-content
        run: |
          npm run type-check

  summary:
    name: Pipeline Summary
    runs-on: self-hosted
    needs: [validate, build, security-scan, test, integration-test, lint]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "Validation: ${{ needs.validate.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Integration Tests: ${{ needs.integration-test.result }}"
          echo "Lint: ${{ needs.lint.result }}"

          if [[ "${{ needs.validate.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.security-scan.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.integration-test.result }}" != "success" ]] || \
             [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Pipeline failed!"
            exit 1
          fi

          echo "âœ… All checks passed!"
