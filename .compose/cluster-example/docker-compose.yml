---
# Docker Compose - Cluster Example
# Generated: 2025-10-24
# Description: Load-balanced multi-instance deployment configuration

services:
  python:
    image: "docker_python:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/python.Dockerfile"
      args:
        ENVIRONMENT: production
        SERVICE_TYPE: app
        WORKERS: 4
    ports:
      - "8001:8000"
      - "8002:8000"
      - "8003:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=python
    volumes:
      - docker_python_app:/app
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
        reservations:
          cpus: "0.25"
          memory: "256m"

  node:
    image: "docker_node:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/node.Dockerfile"
      args:
        ENVIRONMENT: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      - docker_node_app:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  nginx:
    image: "docker_nginx:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/nginx.Dockerfile"
      args:
        ENVIRONMENT: production
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - docker_nginx_logs:/var/log/nginx
      - docker_nginx_cache:/var/cache/nginx
    depends_on:
      - python
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  db:
    image: "docker_postgresql:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/postgresql.Dockerfile"
      args:
        ENVIRONMENT: production
    environment:
      POSTGRES_DB: ${docker_DB_NAME:-mydb}
      POSTGRES_USER: ${docker_DB_USER:-user}
      POSTGRES_PASSWORD: ${docker_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - docker_postgresql_data:/var/lib/postgresql/data
      - docker_postgresql_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${docker_DB_USER:-user} -d ${docker_DB_NAME:-mydb}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  redis:
    image: "docker_redis:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/redis.Dockerfile"
      args:
        ENVIRONMENT: production
    ports:
      - "6379:6379"
    volumes:
      - docker_redis_data:/data
      - docker_redis_logs:/var/log/redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  docker_postgresql_data:
    driver: local
  docker_postgresql_logs:
    driver: local
  docker_redis_data:
    driver: local
  docker_redis_logs:
    driver: local
  docker_python_app:
    driver: local
  docker_node_app:
    driver: local
  docker_nginx_config:
    driver: local
  docker_nginx_logs:
    driver: local
  docker_nginx_cache:
    driver: local

networks:
  default:
    name: docker_cluster_example_network
    driver: bridge