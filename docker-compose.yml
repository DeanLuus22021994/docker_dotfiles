services:
  devcontainer:
    container_name: cluster-devcontainer
    image: mcr.microsoft.com/devcontainers/base:ubuntu
    profiles: ["dev"]
    volumes:
      - ..:/workspaces/docker:cached
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cluster-network
    command: sleep infinity
    depends_on:
      - cluster-postgres
      - cluster-redis
      - loadbalancer

  loadbalancer:
    container_name: cluster-loadbalancer
    image: nginx:alpine
    volumes:
      - ./dockerfile/configs/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - cluster-web1
      - cluster-web2
      - cluster-web3
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-web1:
    container_name: cluster-web1
    image: nginx:alpine
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-web2:
    container_name: cluster-web2
    image: nginx:alpine
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-web3:
    container_name: cluster-web3
    image: nginx:alpine
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-postgres:
    container_name: cluster-postgres
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: clusterdb
      POSTGRES_USER: cluster_user
      POSTGRES_PASSWORD: changeme
    volumes:
      - cluster_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-redis:
    container_name: cluster-redis
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - cluster_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-mariadb:
    container_name: cluster-mariadb
    build:
      context: .
      dockerfile: dockerfile/mariadb.Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: changeme
      MYSQL_DATABASE: clusterdb
      MYSQL_USER: cluster_user
      MYSQL_PASSWORD: changeme
    volumes:
      - cluster_mariadb_data:/var/lib/mysql
      - cluster_mariadb_logs:/var/log/mysql
    ports:
      - "3306:3306"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  cluster-jupyter:
    container_name: cluster-jupyter
    image: jupyter/tensorflow-notebook:latest
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: changeme
    volumes:
      - cluster_jupyter_data:/home/jovyan/work
    ports:
      - "8888:8888"
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-minio:
    container_name: cluster-minio
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - cluster_minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-grafana:
    container_name: cluster-grafana
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - cluster_grafana_data:/var/lib/grafana
    ports:
      - "3002:3000"
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-prometheus:
    container_name: cluster-prometheus
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - cluster_prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cluster-network
    restart: unless-stopped

  cluster-k9s:
    container_name: cluster-k9s
    image: derailed/k9s:latest
    environment:
      KUBECONFIG: /config/kubeconfig
    volumes:
      - cluster_k9s_config:/config
    networks:
      - cluster-network
    entrypoint: ["/bin/sh"]
    command: ["-c", "while true; do sleep 3600; done"]
    restart: unless-stopped

  # GitHub MCP Server - Model Context Protocol for GitHub integration
  cluster-github-mcp:
    container_name: cluster-github-mcp
    image: node:22-alpine
    working_dir: /app
    environment:
      GITHUB_PERSONAL_ACCESS_TOKEN: ${GITHUB_TOKEN:-}
      NODE_ENV: production
    volumes:
      - cluster_github_mcp_data:/app
    networks:
      - cluster-network
    command: >
      sh -c "npm install -g @modelcontextprotocol/server-github &&
             echo 'GitHub MCP Server installed and ready' &&
             tail -f /dev/null"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  cluster_postgres_data:
  cluster_redis_data:
  cluster_mariadb_data:
  cluster_mariadb_logs:
  cluster_jupyter_data:
  cluster_minio_data:
  cluster_grafana_data:
  cluster_prometheus_data:
  cluster_k9s_config:
  cluster_github_mcp_data:
  cluster_mcp_data:

networks:
  cluster-network:
    driver: bridge
