---
# Docker Compose - Swarm Stack
# Generated: 2025-10-24
# Description: Docker Swarm orchestration configuration

services:
  python:
    image: "docker_python:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/python.Dockerfile"
      args:
        ENVIRONMENT: production
        SERVICE_TYPE: app
        WORKERS: 2
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=python
    volumes:
      - docker_python_app:/app
    depends_on:
      - postgresql
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
        reservations:
          cpus: "0.25"
          memory: "256m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first

  node:
    image: "docker_node:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/node.Dockerfile"
      args:
        ENVIRONMENT: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      - docker_node_app:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
        reservations:
          cpus: "0.25"
          memory: "256m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first

  nginx:
    image: "docker_nginx:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/nginx.Dockerfile"
      args:
        ENVIRONMENT: production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - docker_nginx_logs:/var/log/nginx
      - docker_nginx_cache:/var/cache/nginx
    depends_on:
      - python
      - node
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: "256m"
        reservations:
          cpus: "0.25"
          memory: "128m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first

  postgresql:
    image: "docker_postgresql:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/postgresql.Dockerfile"
      args:
        ENVIRONMENT: production
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: ${docker_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - docker_postgresql_data:/var/lib/postgresql/data
      - docker_postgresql_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1.0"
          memory: "1g"
        reservations:
          cpus: "0.5"
          memory: "512m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  mariadb:
    image: "docker_mariadb:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/mariadb.Dockerfile"
      args:
        ENVIRONMENT: production
    environment:
      MARIADB_DATABASE: mydb
      MARIADB_USER: user
      MARIADB_PASSWORD: ${docker_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${docker_DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - docker_mariadb_data:/var/lib/mysql
      - docker_mariadb_logs:/var/log/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "user", "-p${docker_DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1.0"
          memory: "1g"
        reservations:
          cpus: "0.5"
          memory: "512m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  redis:
    image: "docker_redis:latest"
    build:
      context: "../.."
      dockerfile: ".dockerfiles/redis.Dockerfile"
      args:
        ENVIRONMENT: production
    ports:
      - "6379:6379"
    volumes:
      - docker_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
        reservations:
          cpus: "0.25"
          memory: "256m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

volumes:
  docker_postgresql_data:
    driver: local
  docker_postgresql_logs:
    driver: local
  docker_mariadb_data:
    driver: local
  docker_mariadb_logs:
    driver: local
  docker_redis_data:
    driver: local
  docker_nginx_logs:
    driver: local
  docker_nginx_cache:
    driver: local
  docker_python_app:
    driver: local
  docker_node_app:
    driver: local

networks:
  default:
    driver: overlay
    name: docker_swarm_stack_overlay