---
# Swarm Stack Configuration
# Generated: 2025-10-24
# Description: Docker Swarm orchestration configuration

stack:
  name: "swarm-stack"
  description: "Production deployment with Docker Swarm orchestration"
  version: "3.0"
  purpose: "Production deployments, service discovery, rolling updates"

services:
  python:
    name: "python"
    image: "docker_examples_python:latest"
    build:
      context: "../.docker-compose/swarm-stack/dockerfiles"
      dockerfile: "python.Dockerfile"
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=python
    volumes:
      - ./docker_examples_utils:/app/docker_examples_utils:ro
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
        reservations:
          cpus: "0.25"
          memory: "256m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first

  node:
    name: "node"
    image: "docker_examples_node:latest"
    build:
      context: "../.docker-compose/swarm-stack/dockerfiles"
      dockerfile: "node.Dockerfile"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      - ./node-app:/app:ro
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
        reservations:
          cpus: "0.25"
          memory: "256m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first

  db:
    name: "db"
    image: "postgres:15"
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    ports:
      - "5432:5432"
    volumes:
      - docker_examples_db_data:/var/lib/postgresql/data
      - docker_examples_db_logs:/var/log/postgresql
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1.0"
          memory: "1g"
        reservations:
          cpus: "0.5"
          memory: "512m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  redis:
    name: "redis"
    image: "redis:7-alpine"
    ports:
      - "6379:6379"
    volumes:
      - docker_examples_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
        reservations:
          cpus: "0.25"
          memory: "256m"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

volumes:
  docker_examples_db_data:
    driver: local
  docker_examples_db_logs:
    driver: local
  docker_examples_redis_data:
    driver: local

secrets:
  db_password:
    file: ../../secrets/db_password.txt

networks:
  default:
    driver: overlay
    name: docker_examples_swarm-overlay

swarm:
  requirements:
    managers: 1
    workers: 2
  constraints:
    manager_nodes: "node.role == manager"
    worker_nodes: "node.role == worker"
  labels:
    environment: production
    stack: docker_examples

orchestration:
  update_strategy: rolling
  rollback_on_failure: true
  health_check_grace_period: 60s
  service_discovery: true
  load_balancing: dnsrr

monitoring:
  swarm_monitoring:
    enabled: true
    metrics:
      - container_cpu_usage
      - container_memory_usage
      - service_replicas
      - network_traffic
    alerts:
      - service_down
      - high_cpu_usage
      - high_memory_usage
      - replica_failure

logging:
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"
  centralized: false

environment:
  # Security Configuration
  API_KEY: ${API_KEY:-}
  RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
  RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
  CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
  SECURITY_HEADERS_ENABLED: ${SECURITY_HEADERS_ENABLED:-true}
  INPUT_VALIDATION_ENABLED: ${INPUT_VALIDATION_ENABLED:-true}

  # Database Configuration
  POSTGRES_DB: ${POSTGRES_DB:-mydb}
  POSTGRES_USER: ${POSTGRES_USER:-user}

  # Swarm Configuration
  DOCKER_SWARM_MANAGER: ${DOCKER_SWARM_MANAGER:-true}
  SERVICE_DISCOVERY: ${SERVICE_DISCOVERY:-true}

deployment:
  stack_name: "docker_examples"
  compose_file: ".docker-compose/swarm-stack/docker-compose.yml"
  deploy_command: "docker stack deploy -c .docker-compose/swarm-stack/docker-compose.yml docker_examples"
  scale_commands:
    python: "docker service scale docker_examples_python=5"
    node: "docker service scale docker_examples_node=3"
  remove_command: "docker stack rm docker_examples"

maintenance:
  rolling_updates:
    enabled: true
    parallelism: 1
    delay: 10s
    monitor: 60s
  backups:
    database:
      schedule: "0 2 * * *"
      retention: 7
    volumes:
      schedule: "0 3 * * *"
      retention: 30
  cleanup:
    dangling_images: true
    unused_volumes: true
    schedule: "0 4 * * *"