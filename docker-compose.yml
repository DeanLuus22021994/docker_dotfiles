services:
  # Docker Socket Proxy - Secure Docker API access with least privilege
  cluster-docker-socket-proxy:
    container_name: cluster-docker-socket-proxy
    image: tecnativa/docker-socket-proxy:latest
    environment:
      - CONTAINERS=1
      - IMAGES=1
      - INFO=1
      - NETWORKS=1
      - SERVICES=1
      - TASKS=1
      - VOLUMES=1
      - EXEC=0
      - POST=0
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - DISTRIBUTION=0
      - AUTH=0
      - SECRETS=0
      - SWARM=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cluster-management
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /run
      - /tmp
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          cpus: "0.1"
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:2375/_ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  cluster-pre-commit:
    container_name: cluster-pre-commit
    build:
      context: .
      dockerfile: dockerfile/pre-commit.Dockerfile
    volumes:
      - .:/workspace:rw
      - ./.git:/workspace/.git:rw
      - ./.config/git/.pre-commit-config.yaml:/workspace/.pre-commit-config.yaml:ro
      - pre-commit-cache:/root/.cache/pre-commit
    networks:
      - cluster-network
    command: sh -c "chmod -R u+w /workspace 2>/dev/null || true && pre-commit install && pre-commit run --all-files"
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  devcontainer:
    container_name: cluster-devcontainer
    build:
      context: .
      dockerfile: dockerfile/devcontainer.Dockerfile
    environment:
      - GITHUB_OWNER=${GITHUB_OWNER:-DeanLuus22021994}
      - DOCKER_ACCESS_TOKEN=${DOCKER_ACCESS_TOKEN}
      - GH_PAT=${GH_PAT}
      - CODECOV_TOKEN=${CODECOV_TOKEN}
    volumes:
      - ..:/workspaces/docker:cached
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cluster-network
    command: sleep infinity
    depends_on:
      - cluster-pre-commit
      - cluster-postgres
      - cluster-redis
      - cluster-mariadb
      - loadbalancer
      - cluster-grafana
      - cluster-prometheus
      - cluster-docker-api
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  loadbalancer:
    container_name: cluster-loadbalancer
    image: nginx:alpine
    volumes:
      - ./.config/nginx/loadbalancer.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - cluster-web1
      - cluster-web2
      - cluster-web3
    networks:
      - cluster-frontend
      - cluster-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "-4", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 256M
        reservations:
          cpus: "0.5"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-web1:
    container_name: cluster-web1
    image: nginx:alpine
    volumes:
      - ./dashboard:/usr/share/nginx/html:ro
    networks:
      - cluster-backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-web2:
    container_name: cluster-web2
    image: nginx:alpine
    volumes:
      - ./dashboard:/usr/share/nginx/html:ro
    networks:
      - cluster-backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-web3:
    container_name: cluster-web3
    image: nginx:alpine
    volumes:
      - ./dashboard:/usr/share/nginx/html:ro
    networks:
      - cluster-backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Cluster Dashboard - React monitoring dashboard
  cluster-dashboard:
    container_name: cluster-dashboard
    build:
      context: .
      dockerfile: dockerfile/web-dashboard.Dockerfile
    ports:
      - "3000:80"
    networks:
      - cluster-frontend
      - cluster-backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://127.0.0.1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      cluster-postgres:
        condition: service_healthy
      cluster-redis:
        condition: service_healthy
      cluster-mariadb:
        condition: service_healthy
      loadbalancer:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 256M
        reservations:
          cpus: "0.5"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-postgres:
    container_name: cluster-postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: clusterdb
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8'
    secrets:
      - postgres_user
      - postgres_password
    volumes:
      - cluster_postgres_data:/var/lib/postgresql/data
      - ./.config/database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - cluster-data
      - cluster-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $(cat /run/secrets/postgres_user) -d clusterdb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 4G
        reservations:
          cpus: "2.0"
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-redis:
    container_name: cluster-redis
    image: redis:7-alpine
    command: sh -c 'redis-server --appendonly yes --requirepass "$$(cat /run/secrets/redis_password)"'
    secrets:
      - redis_password
    volumes:
      - cluster_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cluster-data
      - cluster-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a $(cat /run/secrets/redis_password) ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-mariadb:
    container_name: cluster-mariadb
    image: mariadb:11-jammy
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mariadb_root_password
      MYSQL_DATABASE: clusterdb
      MYSQL_USER_FILE: /run/secrets/mariadb_user
      MYSQL_PASSWORD_FILE: /run/secrets/mariadb_password
      MARIADB_AUTO_UPGRADE: '1'
      MARIADB_INITDB_SKIP_TZINFO: '1'
    secrets:
      - mariadb_root_password
      - mariadb_user
      - mariadb_password
    volumes:
      - cluster_mariadb_data:/var/lib/mysql
      - cluster_mariadb_logs:/var/log/mysql
      - ./.config/database/mariadb.conf:/etc/mysql/conf.d/custom.cnf:ro
    ports:
      - "3306:3306"
    networks:
      - cluster-data
      - cluster-backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mariadb-admin ping -h localhost -u root -p$(cat /run/secrets/mariadb_root_password) || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 4G
        reservations:
          cpus: "2.0"
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-jupyter:
    container_name: cluster-jupyter
    image: jupyter/tensorflow-notebook:latest
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: ${DOCKER_JUPYTER_TOKEN}
    volumes:
      - cluster_jupyter_data:/home/jovyan/work
    ports:
      - "8888:8888"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "8.0"
          memory: 8G
        reservations:
          cpus: "4.0"
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-minio:
    container_name: cluster-minio
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${DOCKER_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${DOCKER_MINIO_ROOT_PASSWORD}
    volumes:
      - cluster_minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-grafana:
    container_name: cluster-grafana
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${DOCKER_GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: ""
    volumes:
      - cluster_grafana_data:/var/lib/grafana
      - ./.config/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./.config/monitoring/dashboards:/etc/grafana/dashboards:ro
    ports:
      - "3002:3000"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "1.0"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-prometheus:
    container_name: cluster-prometheus
    image: prom/prometheus:latest
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    volumes:
      - ./.config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./.config/monitoring/alerts:/etc/prometheus/alerts:ro
      - cluster_prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Alertmanager - Alert routing and notifications
  cluster-alertmanager:
    container_name: cluster-alertmanager
    image: prom/alertmanager:latest
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=http://localhost:9093"
    volumes:
      - ./.config/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - cluster_alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9093/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-k9s:
    container_name: cluster-k9s
    image: derailed/k9s:latest
    environment:
      KUBECONFIG: /config/kubeconfig
    volumes:
      - cluster_k9s_config:/config
    networks:
      - cluster-network
    entrypoint: ["/bin/sh"]
    command: ["-c", "while true; do sleep 3600; done"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # GitHub MCP Server - Model Context Protocol for GitHub integration
  cluster-github-mcp:
    container_name: cluster-github-mcp
    image: node:22-alpine
    working_dir: /app
    environment:
      GITHUB_PERSONAL_ACCESS_TOKEN: ${GITHUB_TOKEN:-}
      NODE_ENV: production
    volumes:
      - cluster_github_mcp_data:/app
    networks:
      - cluster-network
    command: >
      sh -c "npm install -g @modelcontextprotocol/server-github &&
             echo 'GitHub MCP Server installed and ready' &&
             tail -f /dev/null"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # BuildKit - Docker build engine with cache optimization
  cluster-buildkit:
    container_name: cluster-buildkit
    build:
      context: .
      dockerfile: dockerfile/buildkit.Dockerfile
    privileged: true
    volumes:
      - cluster_buildkit_data:/var/lib/buildkit
    ports:
      - "1234:1234"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1234"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 4G
        reservations:
          cpus: "2.0"
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # LocalStack - Local AWS cloud stack for development
  cluster-localstack:
    container_name: cluster-localstack
    build:
      context: .
      dockerfile: dockerfile/localstack.Dockerfile
    environment:
      SERVICES: s3,dynamodb,sqs,sns,lambda,apigateway,cloudformation,ec2,iam
      DEBUG: 1
      DATA_DIR: /var/lib/localstack
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - cluster_localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "4566:4566"
      - "4571:4571"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MailHog - Email testing tool
  cluster-mailhog:
    container_name: cluster-mailhog
    build:
      context: .
      dockerfile: dockerfile/mailhog.Dockerfile
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8025",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # pgAdmin - Database administration tool
  cluster-pgadmin:
    container_name: cluster-pgadmin
    build:
      context: .
      dockerfile: dockerfile/pgadmin.Dockerfile
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: ${DOCKER_PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - cluster_pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - cluster-network
    restart: unless-stopped
    depends_on:
      - cluster-postgres
      - cluster-mariadb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Commander - Redis management UI
  cluster-redis-commander:
    container_name: cluster-redis-commander
    build:
      context: .
      dockerfile: dockerfile/redis-commander.Dockerfile
    environment:
      REDIS_HOSTS: "local:cluster-redis:6379:0:${DOCKER_REDIS_PASSWORD}"
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8082:8081"
    networks:
      - cluster-network
    restart: unless-stopped
    depends_on:
      - cluster-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Docker API Proxy - Real-time metrics from Docker Engine
  cluster-docker-api:
    container_name: cluster-docker-api
    build:
      context: .
      dockerfile: dockerfile/docker-api.Dockerfile
    user: "node:node"  # Run as non-root user
    ports:
      - "3001:3001"
    networks:
      - cluster-backend
      - cluster-management
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DOCKER_HOST: tcp://cluster-docker-socket-proxy:2375
    depends_on:
      cluster-docker-socket-proxy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # cAdvisor - Container metrics for Prometheus
  cluster-cadvisor:
    container_name: cluster-cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8081:8080"
    networks:
      - cluster-network
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/healthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Exporter - Database metrics for Prometheus
  cluster-postgres-exporter:
    container_name: cluster-postgres-exporter
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: >-
        postgresql://cluster_user:${DOCKER_POSTGRES_PASSWORD}@cluster-postgres:5432/clusterdb?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - cluster-network
    restart: unless-stopped
    depends_on:
      - cluster-postgres
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9187/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Exporter - Cache metrics for Prometheus
  cluster-redis-exporter:
    container_name: cluster-redis-exporter
    build:
      context: .
      dockerfile: dockerfile/redis-exporter.Dockerfile
    environment:
      REDIS_ADDR: cluster-redis:6379
      REDIS_PASSWORD: ${DOCKER_REDIS_PASSWORD}
    ports:
      - "9121:9121"
    networks:
      - cluster-network
    restart: unless-stopped
    depends_on:
      - cluster-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Node Exporter - Host metrics for Prometheus
  cluster-node-exporter:
    container_name: cluster-node-exporter
    image: prom/node-exporter:latest
    command:
      - "--path.rootfs=/host"
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      - "--log.level=warn"
    volumes:
      - /:/host:ro
    ports:
      - "9100:9100"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9100/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MkDocs Material - Modern documentation platform with nginx production serving
  cluster-docs:
    container_name: cluster-docs
    build:
      context: .
      dockerfile: dockerfile/mkdocs.Dockerfile
      target: development # Use 'production' for static nginx serving
      args:
        MKDOCS_VERSION: "1.6.1"
        MATERIAL_VERSION: "9.6.22"
        AWESOME_PAGES_VERSION: "2.9.3"
    image: cluster-mkdocs:2.0-dev
    volumes:
      # Source files for hot reload (development mode only)
      - ./docs:/docs/docs
      - ./.config/mkdocs:/docs/.config/mkdocs
      # Named volumes keep build artifacts clean
      - cluster_mkdocs_site:/docs/site
      - cluster_mkdocs_cache:/root/.cache
    ports:
      - "8000:8000"
    networks:
      - cluster-network
    environment:
      - DOCS_SITE_URL=http://localhost:8000
      - MKDOCS_LIVE_RELOAD_SUPPORT=true
    restart: unless-stopped
    profiles: ["docs", "dev"]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'python -c ''import urllib.request; urllib.request.urlopen("http://localhost:8000").read()'' || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # NVIDIA GPU Device Plugin for Kubernetes
  cluster-gpu-node:
    container_name: cluster-gpu-node
    build:
      context: .
      dockerfile: dockerfile/gpu-node.Dockerfile
    volumes:
      - /var/lib/kubelet/device-plugins:/var/lib/kubelet/device-plugins
    networks:
      - cluster-network
    restart: unless-stopped
    privileged: true
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-mkdocs:
    container_name: cluster-mkdocs
    build:
      context: .
      dockerfile: .config/mkdocs/Dockerfile
      target: runtime
    ports:
      - "8080:8080"
    volumes:
      - cluster_mkdocs_site:/usr/share/nginx/html:ro
    networks:
      - cluster-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health/",
        ]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          cpus: "0.1"
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - docs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docs.rule=Host(`docs.localhost`)"
      - "traefik.http.services.docs.loadbalancer.server.port=8080"

  cluster-mkdocs-dev:
    container_name: cluster-mkdocs-dev
    image: python:3.14-slim
    working_dir: /workspace
    command: bash -c "cd .config/mkdocs && pip install -q -r requirements.txt && mkdocs serve -a 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - .:/workspace:ro
    networks:
      - cluster-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - docs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docs-dev.rule=Host(`docs-dev.localhost`)"
      - "traefik.http.services.docs-dev.loadbalancer.server.port=8000"

volumes:
  cluster_postgres_data:
  cluster_redis_data:
  cluster_mariadb_data:
  cluster_mariadb_logs:
  cluster_jupyter_data:
  cluster_minio_data:
  cluster_grafana_data:
  cluster_prometheus_data:
  cluster_alertmanager_data:
  cluster_k9s_config:
  cluster_github_mcp_data:
  cluster_mcp_data:
  cluster_buildkit_data:
  cluster_localstack_data:
  cluster_pgadmin_data:
  cluster_mkdocs_site:
  cluster_mkdocs_cache:
  pre-commit-cache:

networks:
  # Frontend Network - Public-facing services (nginx, traefik, web dashboards)
  cluster-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

  # Backend Network - Application services (API, worker processes)
  cluster-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24

  # Data Network - Database and cache services (postgres, redis, mariadb, minio)
  cluster-data:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.20.2.0/24

  # Observability Network - Monitoring and logging services
  cluster-observability:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.3.0/24

  # Management Network - DevOps tools (buildkit, pre-commit, docker socket proxy)
  cluster-management:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.4.0/24

  # Legacy network for backward compatibility - will be phased out
  cluster-network:
    driver: bridge

secrets:
  postgres_password:
    file: ./.secrets/postgres_password.txt
  postgres_user:
    file: ./.secrets/postgres_user.txt
  redis_password:
    file: ./.secrets/redis_password.txt
  mariadb_root_password:
    file: ./.secrets/mariadb_root_password.txt
  mariadb_password:
    file: ./.secrets/mariadb_password.txt
  mariadb_user:
    file: ./.secrets/mariadb_user.txt
