name: Documentation Quality Assurance

"on":
  push:
    branches: [main, develop]
    paths: ["docs/**/*.md"]
  pull_request:
    branches: [main]
    paths: ["docs/**/*.md"]

jobs:
  validate-frontmatter:
    name: Validate Documentation Frontmatter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydantic>=2.9 rich>=13.9 pyyaml>=6.0

      - name: Validate frontmatter compliance
        run: |
          python .config/mkdocs/scripts/audit_frontmatter.py --strict

      - name: Run frontmatter validation hook
        env:
          MKDOCS_STRICT_FRONTMATTER: "true"
        run: |
          python -c "
          import sys
          from pathlib import Path
          sys.path.append('.config/mkdocs')
          from hooks.validate_frontmatter import validate_file_frontmatter

          docs_dir = Path('docs')
          errors = []

          for md_file in docs_dir.rglob('*.md'):
              if md_file.name in {'index.md', 'tags.md', '404.md'}:
                  continue
              is_valid, file_errors = validate_file_frontmatter(md_file)
              if not is_valid:
                  errors.append((str(md_file), file_errors))

          if errors:
              print('❌ Frontmatter validation failed:')
              for file_path, file_errors in errors:
                  print(f'  {file_path}:')
                  for error in file_errors:
                      print(f'    - {error}')
              sys.exit(1)
          else:
              print(f'✅ All documentation files have valid frontmatter')
          "

      - name: Check for orphaned files
        run: |
          python -c "
          import sys
          from pathlib import Path

          docs_dir = Path('docs')
          all_files = set()
          referenced_files = set()

          # Collect all markdown files
          for md_file in docs_dir.rglob('*.md'):
              all_files.add(str(md_file.relative_to(docs_dir)))

          # Find files referenced in frontmatter
          import yaml
          for md_file in docs_dir.rglob('*.md'):
              try:
                  content = md_file.read_text(encoding='utf-8')
                  if content.startswith('---'):
                      end_idx = content.find('\n---\n', 4)
                      if end_idx > 0:
                          frontmatter = yaml.safe_load(content[4:end_idx])
                          if isinstance(frontmatter, dict) and 'related' in frontmatter:
                              for rel_path in frontmatter.get('related', []):
                                  if isinstance(rel_path, str):
                                      referenced_files.add(rel_path)
              except Exception:
                  continue

          # Find orphaned files (not referenced anywhere)
          orphaned = []
          for file_path in all_files:
              if file_path not in referenced_files and file_path not in {'index.md', 'tags.md', '404.md'}:
                  # Check if file has any related references pointing to other files
                  full_path = docs_dir / file_path
                  try:
                      content = full_path.read_text(encoding='utf-8')
                      if content.startswith('---'):
                          end_idx = content.find('\n---\n', 4)
                          if end_idx > 0:
                              frontmatter = yaml.safe_load(content[4:end_idx])
                              if not isinstance(frontmatter, dict) or not frontmatter.get('related'):
                                  orphaned.append(file_path)
                  except Exception:
                      orphaned.append(file_path)

          if orphaned:
              print('⚠️  Warning: Found potentially orphaned files:')
              for file_path in sorted(orphaned):
                  print(f'  - {file_path}')
              print()
              print('Consider adding cross-references in frontmatter or .pages files')
          else:
              print('✅ No orphaned files detected')
          "

  build-docs:
    name: Test Documentation Build
    runs-on: ubuntu-latest
    needs: validate-frontmatter

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"

      - name: Install MkDocs and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material>=9.5.39 pydantic>=2.9 rich>=13.9 pyyaml>=6.0

      - name: Test documentation build
        env:
          MKDOCS_STRICT_FRONTMATTER: "true"
        run: |
          mkdocs build --strict --verbose

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docs-build
          path: site/
          retention-days: 7
