---
# Basic Stack Configuration
# Generated: 2025-10-24
# Description: Complete configuration for basic development stack

stack:
  name: "basic-stack"
  description: "Development and testing environment with all core services"
  version: "3.0"
  purpose: "Local development, CI/CD pipelines, basic testing"

services:
  python:
    name: "python"
    image: "docker_examples_python:latest"
    build:
      context: "../.docker-compose/basic-stack/dockerfiles"
      dockerfile: "python.Dockerfile"
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
    volumes:
      - ./docker_examples_utils:/app/docker_examples_utils:ro
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  node:
    name: "node"
    image: "docker_examples_node:latest"
    build:
      context: "../.docker-compose/basic-stack/dockerfiles"
      dockerfile: "node.Dockerfile"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./node-app:/app:ro
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  db:
    name: "db"
    image: "postgres:15"
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    ports:
      - "5432:5432"
    volumes:
      - docker_examples_db_data:/var/lib/postgresql/data
      - docker_examples_db_logs:/var/log/postgresql
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  redis:
    name: "redis"
    image: "redis:7-alpine"
    ports:
      - "6379:6379"
    volumes:
      - docker_examples_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  docker_examples_db_data:
    driver: local
  docker_examples_db_logs:
    driver: local
  docker_examples_redis_data:
    driver: local

secrets:
  db_password:
    file: ../../secrets/db_password.txt

networks:
  default:
    name: docker_examples_basic-stack-network
    driver: bridge

environment:
  # Security Configuration
  API_KEY: ${API_KEY:-}
  RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
  RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
  CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
  SECURITY_HEADERS_ENABLED: ${SECURITY_HEADERS_ENABLED:-true}
  INPUT_VALIDATION_ENABLED: ${INPUT_VALIDATION_ENABLED:-true}

  # Database Configuration
  POSTGRES_DB: ${POSTGRES_DB:-mydb}
  POSTGRES_USER: ${POSTGRES_USER:-user}

  # External APIs
  GITHUB_TOKEN: ${GITHUB_TOKEN:-}

health_checks:
  overall_timeout: 300s
  service_startup_order: ["db", "redis", "python", "node"]
  required_services: ["db", "redis", "python", "node"]

development:
  hot_reload: true
  debug_mode: true
  log_level: DEBUG
  auto_restart: true

testing:
  test_command: "docker compose -f .docker-compose/mcp/python_utils/docker-compose.yml run --rm test"
  coverage_command: "docker compose -f .docker-compose/mcp/python_utils/docker-compose.yml run --rm test-coverage"
  lint_command: "docker compose -f .docker-compose/mcp/python_utils/docker-compose.yml run --rm lint"

deployment:
  compose_file: ".docker-compose/basic-stack/docker-compose.yml"
  scale_defaults:
    python: 1
    node: 1
    db: 1
    redis: 1
  resource_limits:
    python:
      cpus: "1.0"
      memory: "1g"
    node:
      cpus: "0.5"
      memory: "512m"
    db:
      cpus: "0.5"
      memory: "512m"
    redis:
      cpus: "0.25"
      memory: "256m"