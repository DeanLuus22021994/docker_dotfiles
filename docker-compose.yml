services:
  # Development container with full cluster access and GPU support
  devcontainer:
    container_name: cluster-devcontainer
    build:
      context: .devcontainer
      dockerfile: devcontainer.dockerfile
    volumes:
      - .:/workspaces/docker:cached
      - cluster_vscode_extensions:/home/vscode/.vscode-server/extensions
      - cluster_node_modules:/workspaces/docker/node_modules
      - cluster_python_cache:/home/vscode/.cache/pip
      - cluster_npm_cache:/home/vscode/.npm
      - /var/run/docker.sock:/var/run/docker.sock:ro
    working_dir: /workspaces/docker
    command: sleep infinity
    networks:
      - cluster-network
    profiles:
      - dev
    ports:
      - "3000:3000"  # Node.js dev server
      - "8000:8000"  # Python dev server
      - "5173:5173"  # Vite dev server
    environment:
      - POSTGRES_HOST=cluster-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=clusterdb
      - POSTGRES_USER=cluster_user
      - POSTGRES_PASSWORD=changeme
      - REDIS_HOST=cluster-redis
      - REDIS_PORT=6379
      - GITHUB_MCP_HOST=cluster-github-mcp
      - GITHUB_MCP_PORT=3001
      - JUPYTER_HOST=cluster-jupyter
      - JUPYTER_PORT=8888
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      cluster-postgres:
        condition: service_healthy
      cluster-redis:
        condition: service_healthy

  # Nginx load balancer - distributes traffic across web servers
  loadbalancer:
    container_name: cluster-loadbalancer
    build:
      context: .
      dockerfile: dockerfiles/nginx.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./dockerfiles/default.conf:/etc/nginx/conf.d/default.conf:ro
      - cluster_nginx_cache:/var/cache/nginx
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      cluster-web1:
        condition: service_healthy
      cluster-web2:
        condition: service_healthy
      cluster-web3:
        condition: service_healthy
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Web server replicas for high availability
  cluster-web1:
    container_name: cluster-web1
    build:
      context: .
      dockerfile: dockerfiles/nginx.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
      - cluster_nginx_cache:/var/cache/nginx
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  cluster-web2:
    container_name: cluster-web2
    build:
      context: .
      dockerfile: dockerfiles/nginx.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
      - cluster_nginx_cache:/var/cache/nginx
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  cluster-web3:
    container_name: cluster-web3
    build:
      context: .
      dockerfile: dockerfiles/nginx.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
      - cluster_nginx_cache:/var/cache/nginx
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # PostgreSQL - Primary database
  cluster-postgres:
    container_name: cluster-postgres
    build:
      context: .
      dockerfile: dockerfiles/postgres.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    environment:
      POSTGRES_DB: clusterdb
      POSTGRES_USER: cluster_user
      POSTGRES_PASSWORD: changeme
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - cluster_postgres_data:/var/lib/postgresql/data
      - cluster_postgres_logs:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cluster_user -d clusterdb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis - Cache and message broker
  cluster-redis:
    container_name: cluster-redis
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass changeme
    volumes:
      - cluster_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # GitHub MCP Server
  cluster-github-mcp:
    container_name: cluster-github-mcp
    build:
      context: .
      dockerfile: dockerfiles/github-mcp.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_TOKEN:-}
      - PORT=3001
    ports:
      - "3001:3001"
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    depends_on:
      - cluster-redis

  # Jupyter Lab - Data science environment with GPU support
  cluster-jupyter:
    container_name: cluster-jupyter
    image: jupyter/tensorflow-notebook:latest
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=changeme
      - POSTGRES_HOST=cluster-postgres
      - POSTGRES_DB=clusterdb
      - POSTGRES_USER=cluster_user
      - POSTGRES_PASSWORD=changeme
      - REDIS_HOST=cluster-redis
    volumes:
      - cluster_jupyter_data:/home/jovyan/work
      - cluster_python_cache:/home/jovyan/.cache
    ports:
      - "8888:8888"
    networks:
      - cluster-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      cluster-postgres:
        condition: service_healthy
      cluster-redis:
        condition: service_healthy

  # MinIO - S3-compatible object storage
  cluster-minio:
    container_name: cluster-minio
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - cluster_minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Grafana - Monitoring and visualization
  cluster-grafana:
    container_name: cluster-grafana
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - cluster_grafana_data:/var/lib/grafana
    ports:
      - "3002:3000"
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      - cluster-postgres
      - cluster-redis

  # Prometheus - Metrics collection
  cluster-prometheus:
    container_name: cluster-prometheus
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - cluster_prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # k9s - Kubernetes CLI UI
  cluster-k9s:
    container_name: cluster-k9s
    build:
      context: .
      dockerfile: dockerfiles/k9s.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - cluster_k9s_config:/root/.config/k9s
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "k9s", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    command: ["sleep", "infinity"]

volumes:
  cluster_nginx_cache:
    name: cluster_nginx_cache
    driver: local
  cluster_postgres_data:
    name: cluster_postgres_data
    driver: local
  cluster_postgres_logs:
    name: cluster_postgres_logs
    driver: local
  cluster_redis_data:
    name: cluster_redis_data
    driver: local
  cluster_jupyter_data:
    name: cluster_jupyter_data
    driver: local
  cluster_python_cache:
    name: cluster_python_cache
    driver: local
  cluster_minio_data:
    name: cluster_minio_data
    driver: local
  cluster_grafana_data:
    name: cluster_grafana_data
    driver: local
  cluster_prometheus_data:
    name: cluster_prometheus_data
    driver: local
  cluster_k9s_config:
    name: cluster_k9s_config
    driver: local
  cluster_vscode_extensions:
    name: cluster_vscode_extensions
    driver: local
  cluster_node_modules:
    name: cluster_node_modules
    driver: local
  cluster_npm_cache:
    name: cluster_npm_cache
    driver: local

networks:
  cluster-network:
    name: cluster-network
    driver: bridge
