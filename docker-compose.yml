secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  mariadb_root_password:
    file: ./secrets/mariadb_root_password.txt
  mariadb_password:
    file: ./secrets/mariadb_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  minio_root_user:
    file: ./secrets/minio_root_user.txt
  minio_root_password:
    file: ./secrets/minio_root_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
  jupyter_token:
    file: ./secrets/jupyter_token.txt
  pgadmin_password:
    file: ./secrets/pgadmin_password.txt

services:
  devcontainer:
    container_name: cluster-devcontainer
    image: mcr.microsoft.com/devcontainers/base:ubuntu
    profiles: ["dev"]
    volumes:
      - ..:/workspaces/docker:cached
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cluster-network
    command: sleep infinity
    depends_on:
      - cluster-postgres
      - cluster-redis
      - loadbalancer
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  loadbalancer:
    container_name: cluster-loadbalancer
    image: nginx:alpine
    volumes:
      - ./dockerfile/configs/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - cluster-web1
      - cluster-web2
      - cluster-web3
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-web1:
    container_name: cluster-web1
    image: nginx:alpine
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-web2:
    container_name: cluster-web2
    image: nginx:alpine
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-web3:
    container_name: cluster-web3
    image: nginx:alpine
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Cluster Dashboard - React monitoring dashboard
  cluster-dashboard:
    container_name: cluster-dashboard
    build:
      context: ./web-content
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - cluster-postgres
      - cluster-redis
      - cluster-mariadb
      - loadbalancer
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-postgres:
    container_name: cluster-postgres
    image: postgres:13-alpine
    secrets:
      - postgres_password
    environment:
      POSTGRES_DB: clusterdb
      POSTGRES_USER: cluster_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - cluster_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cluster_user -d clusterdb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-redis:
    container_name: cluster-redis
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - cluster_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-mariadb:
    container_name: cluster-mariadb
    build:
      context: .
      dockerfile: dockerfile/mariadb.Dockerfile
    secrets:
      - mariadb_root_password
      - mariadb_password
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mariadb_root_password
      MYSQL_DATABASE: clusterdb
      MYSQL_USER: cluster_user
      MYSQL_PASSWORD_FILE: /run/secrets/mariadb_password
    volumes:
      - cluster_mariadb_data:/var/lib/mysql
      - cluster_mariadb_logs:/var/log/mysql
    ports:
      - "3306:3306"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "root", "-p$$(cat /run/secrets/mariadb_root_password)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-jupyter:
    container_name: cluster-jupyter
    image: jupyter/tensorflow-notebook:latest
    secrets:
      - jupyter_token
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN_FILE: /run/secrets/jupyter_token
    volumes:
      - cluster_jupyter_data:/home/jovyan/work
    ports:
      - "8888:8888"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 8G
        reservations:
          cpus: '4.0'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-minio:
    container_name: cluster-minio
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    secrets:
      - minio_root_user
      - minio_root_password
    environment:
      MINIO_ROOT_USER_FILE: /run/secrets/minio_root_user
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/minio_root_password
    volumes:
      - cluster_minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-grafana:
    container_name: cluster-grafana
    image: grafana/grafana:latest
    secrets:
      - grafana_admin_password
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
    volumes:
      - cluster_grafana_data:/var/lib/grafana
    ports:
      - "3002:3000"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-prometheus:
    container_name: cluster-prometheus
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - cluster_prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cluster-k9s:
    container_name: cluster-k9s
    image: derailed/k9s:latest
    environment:
      KUBECONFIG: /config/kubeconfig
    volumes:
      - cluster_k9s_config:/config
    networks:
      - cluster-network
    entrypoint: ["/bin/sh"]
    command: ["-c", "while true; do sleep 3600; done"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # GitHub MCP Server - Model Context Protocol for GitHub integration
  cluster-github-mcp:
    container_name: cluster-github-mcp
    image: node:22-alpine
    working_dir: /app
    environment:
      GITHUB_PERSONAL_ACCESS_TOKEN: ${GITHUB_TOKEN:-}
      NODE_ENV: production
    volumes:
      - cluster_github_mcp_data:/app
    networks:
      - cluster-network
    command: >
      sh -c "npm install -g @modelcontextprotocol/server-github &&
             echo 'GitHub MCP Server installed and ready' &&
             tail -f /dev/null"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # BuildKit - Docker build engine with cache optimization
  cluster-buildkit:
    container_name: cluster-buildkit
    build:
      context: .
      dockerfile: dockerfile/buildkit.Dockerfile
    privileged: true
    volumes:
      - cluster_buildkit_data:/var/lib/buildkit
    ports:
      - "1234:1234"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "buildctl", "debug", "workers"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # LocalStack - Local AWS cloud stack for development
  cluster-localstack:
    container_name: cluster-localstack
    build:
      context: .
      dockerfile: dockerfile/localstack.Dockerfile
    environment:
      SERVICES: s3,dynamodb,sqs,sns,lambda,apigateway,cloudformation,ec2,iam
      DEBUG: 1
      DATA_DIR: /var/lib/localstack
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - cluster_localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "4566:4566"
      - "4571:4571"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MailHog - Email testing tool
  cluster-mailhog:
    container_name: cluster-mailhog
    build:
      context: .
      dockerfile: dockerfile/mailhog.Dockerfile
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - cluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # pgAdmin - Database administration tool
  cluster-pgadmin:
    container_name: cluster-pgadmin
    build:
      context: .
      dockerfile: dockerfile/pgadmin.Dockerfile
    secrets:
      - pgadmin_password
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cluster.local
      PGADMIN_DEFAULT_PASSWORD_FILE: /run/secrets/pgadmin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - cluster_pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - cluster-network
    restart: unless-stopped
    depends_on:
      - cluster-postgres
      - cluster-mariadb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Commander - Redis management UI
  cluster-redis-commander:
    container_name: cluster-redis-commander
    build:
      context: .
      dockerfile: dockerfile/redis-commander.Dockerfile
    ports:
      - "8081:8081"
    networks:
      - cluster-network
    restart: unless-stopped
    depends_on:
      - cluster-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  cluster_postgres_data:
  cluster_redis_data:
  cluster_mariadb_data:
  cluster_mariadb_logs:
  cluster_jupyter_data:
  cluster_minio_data:
  cluster_grafana_data:
  cluster_prometheus_data:
  cluster_k9s_config:
  cluster_github_mcp_data:
  cluster_mcp_data:
  cluster_buildkit_data:
  cluster_localstack_data:
  cluster_pgadmin_data:

networks:
  cluster-network:
    driver: bridge
