#!/bin/bash
# Docker Stack Validation and Cleanup Script
# Provides comprehensive validation and cleanup using standardized library

set -e

# Source common library
source ".compose/lib/common.sh"

# Override stacks for this script (includes all stacks)
STACKS=("basic-stack" "cluster-example" "swarm-stack" "mcp")

# Validation functions (using common library)
validate_compose_file() {
    local stack=$1
    validate_stack_exists "$stack" || return 1
    validate_compose_syntax "$stack" && validate_compose_services "$stack"
}

validate_config_consistency() {
    local stack=$1
    validate_config_exists "$stack" && validate_config_services "$stack"
}

# Testing functions (using common library)
test_deployment() {
    local stack=$1
    check_stack_health "$stack" 30
}

cleanup_deployment() {
    local stack=$1
    cleanup_stack "$stack"
}

# Main functions
validate_all_stacks() {
    log_info "Starting comprehensive stack validation..."
    echo "=========================================="

    local stacks=("basic-stack" "cluster-example" "swarm-stack" "mcp")
    local results=()
    local failed=0

    for stack in "${stacks[@]}"; do
        log_info "Processing stack: $stack"
        echo "---"

        # Validate compose file
        if ! validate_compose_file "$stack"; then
            results+=("$stack: COMPOSE_INVALID")
            ((failed++))
            continue
        fi

        # Validate config consistency
        if ! validate_config_consistency "$stack"; then
            results+=("$stack: CONFIG_INCONSISTENT")
            ((failed++))
            continue
        fi

        results+=("$stack: VALID")
        echo ""
    done

    # Summary
    echo "=========================================="
    log_info "Validation Summary:"
    printf '%s\n' "${results[@]}"

    if [ $failed -eq 0 ]; then
        log_success "All stacks validated successfully!"
        return 0
    else
        log_error "$failed stack(s) failed validation"
        return 1
    fi
}

test_all_deployments() {
    log_info "Starting deployment testing..."
    echo "=========================================="

    local stacks=("basic-stack" "cluster-example" "swarm-stack" "mcp")
    local results=()
    local failed=0

    for stack in "${stacks[@]}"; do
        log_info "Testing deployment: $stack"

        if test_deployment "$stack"; then
            results+=("$stack: DEPLOY_SUCCESS")
        else
            results+=("$stack: DEPLOY_FAILED")
            ((failed++))
        fi

        # Always cleanup
        cleanup_deployment "$stack"
        echo ""
    done

    # Summary
    echo "=========================================="
    log_info "Deployment Test Summary:"
    printf '%s\n' "${results[@]}"

    if [ $failed -eq 0 ]; then
        log_success "All deployments tested successfully!"
        return 0
    else
        log_error "$failed deployment(s) failed"
        return 1
    fi
}

generate_report() {
    local report_file="$REPORTS_DIR/automation_report_$(date +%Y%m%d_%H%M%S).md"

    log_info "Generating comprehensive report..."

    cat > "$report_file" << EOF
# Docker Stack Automation Report
Generated: $(date)

## System Information
- Docker Version: $(docker --version 2>/dev/null || echo "Not available")
- Docker Compose Version: $(docker-compose --version 2>/dev/null || echo "Not available")
- Base Directory: $BASE_DIR

## Validation Results
$(validate_all_stacks 2>&1)

## Deployment Test Results
$(test_all_deployments 2>&1)

## Configuration Summary
- Config Directory: $CONFIG_DIR
- Compose Directory: $COMPOSE_DIR
- Stacks Found: $(ls -1 "$CONFIG_DIR" | wc -l)
- Compose Files: $(find "$COMPOSE_DIR" -name "docker-compose.yml" | wc -l)

## Recommendations
1. Ensure all config files have corresponding compose files
2. Validate environment variables are properly set
3. Check volume mounts and network configurations
4. Monitor service health checks
5. Review resource limits and constraints

---
Report generated by Docker Stack Automation Script
EOF

    log_success "Report saved to: $report_file"
}

# Main execution
main() {
    local action="${1:-all}"

    case "$action" in
        "validate")
            check_docker
            check_docker_compose
            validate_all_stacks
            ;;
        "test")
            check_docker
            check_docker_compose
            test_all_deployments
            ;;
        "cleanup")
            cleanup_build_cache
            cleanup_docker_resources
            ;;
        "report")
            generate_report "Docker Stack Automation Report"
            ;;
        "all")
            log_header "Full Docker Stack Automation"
            check_docker
            check_docker_compose
            cleanup_build_cache
            cleanup_docker_resources
            validate_all_stacks
            test_all_deployments
            generate_report "Docker Stack Automation Report"
            ;;
        "help"|*)
            show_usage "Automation Script"
            ;;
    esac
}

# Run main function with all arguments
main "$@"